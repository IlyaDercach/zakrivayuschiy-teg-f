const { src, dest, parallel, series, watch } = require('gulp');
const browserSync = require('browser-sync').create();
const uglify = require('gulp-uglify-es').default;
const plumber = require('gulp-plumber');
const htmlMinify = require('html-minifier');
const postcss = require('gulp-postcss');
const autoprefixer = require('autoprefixer');
const postcssCombineMediaQuery = require('postcss-combine-media-query');
const cssnano = require('cssnano');
const del = require('del');
// const concatcss = require('gulp-concat-css');
// const concat = require('gulp-concat');

function serve() {
	browserSync.init({
		server: { baseDir: './dist' },
		notify: false,
	});
}

function html() {
	const options = {
		includeAutoGeneratedTags: true,
		removeAttributeQuotes: true,
		removeComments: true,
		removeRedundantAttributes: true,
		removeScriptTypeAttributes: true,
		removeStyleLinkTypeAttributes: true,
		sortClassName: true,
		useShortDoctype: true,
		collapseWhitespace: true,
	};

	return src('src/**/*.html')
		.pipe(plumber())
		.on('data', function (file) {
			const buferFile = Buffer.from(
				htmlMinify.minify(file.contents.toString(), options),
			);
			return (file.contents = buferFile);
		})
		.pipe(dest('dist/'))
		.pipe(browserSync.reload({ stream: true }));
}

function css() {
	const plugins = [autoprefixer(), postcssCombineMediaQuery(), cssnano()];
	return (
		src('src/styles/**/*.css')
			.pipe(plumber())
			// .pipe(concatcss('style.css')) поочередно конкатенировать файлы
			.pipe(postcss(plugins))
			.pipe(dest('dist/styles'))
			.pipe(browserSync.reload({ stream: true }))
	);
}

function js() {
	return (
		src('src/scripts/**/*.js')
			.pipe(plumber())
			// .pipe(concat('app.min.js'))
			.pipe(uglify())
			.pipe(dest('dist/scripts'))
			.pipe(browserSync.reload({ stream: true }))
	);
}

function images() {
	return src('src/images/**/*.{jpg,png,svg,gif,ico,webp,avif}')
		.pipe(plumber())
		.pipe(dest('dist/images'))
		.pipe(browserSync.reload({ stream: true }));
}

function svg() {
	return src('src/svg/**/*.svg')
		.pipe(plumber())
		.pipe(dest('dist/svg'))
		.pipe(browserSync.reload({ stream: true }));
}

function fonts() {
	return src('src/fonts/*')
		.pipe(plumber())
		.pipe(dest('dist/fonts'))
		.pipe(browserSync.reload({ stream: true }));
}

function clean() {
	return del('dist');
}

function watchFiles() {
	watch(['src/**/*.html'], html);
	watch(['src/styles/**/*.css'], css);
	watch(['src/**/*.js'], js);
	watch(['src/fonts/**/*'], fonts);
	watch(['src/images/**/*.{jpg,png,gif,ico,webp,avif}'], images);
	watch(['src/svg/**/*.svg'], svg);
}

const build = series(clean, parallel(html, css, js, fonts, images, svg));
const watcher = parallel(build, watchFiles, serve);

exports.html = html;
exports.css = css;
exports.js = js;
exports.fonts = fonts;
exports.images = images;
exports.svg = svg;

exports.clean = clean;
exports.build = build;
exports.watcher = watcher;
exports.default = watcher;
